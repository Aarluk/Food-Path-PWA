{"version":3,"sources":["webpack:///./node_modules/fsevents/fsevents.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACa;;AAEb;AACA,wEAAwE,iBAAiB;AACzF;;AAEA,eAAe,mBAAO,CAAC,8DAAiB;AACxC;;AAEA;AACA;AACA,0EAA0E,YAAY;AACtF;AACA;AACA,4EAA4E,eAAe;AAC3F;;AAEA;AACA,qDAAqD,KAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"./public/0.bundle.js","sourcesContent":["/*\n ** Â© 2020 by Philipp Dunkel, Ben Noordhuis, Elan Shankar, Paul Miller\n ** Licensed under MIT License.\n */\n\n/* jshint node:true */\n'use strict';\n\nif (process.platform !== 'darwin') {\n  throw new Error(`Module 'fsevents' is not compatible with platform '${process.platform}'`);\n}\n\nconst Native = require('./fsevents.node');\nconst events = Native.constants;\n\nfunction watch(path, handler) {\n  if (typeof path !== 'string') {\n    throw new TypeError(`fsevents argument 1 must be a string and not a ${typeof path}`);\n  }\n  if (typeof handler !== 'function') {\n    throw new TypeError(`fsevents argument 2 must be a function and not a ${typeof handler}`);\n  }\n\n  let instance = Native.start(path, handler);\n  if (!instance) throw new Error(`could not watch: ${path}`);\n  return () => {\n    const result = instance\n      ? Promise.resolve(instance).then(Native.stop)\n      : Promise.resolve(undefined);\n    instance = undefined;\n    return result;\n  };\n}\n\nfunction getInfo(path, flags) {\n  return {\n    path,\n    flags,\n    event: getEventType(flags),\n    type: getFileType(flags),\n    changes: getFileChanges(flags)\n  };\n}\n\nfunction getFileType(flags) {\n  if (events.ItemIsFile & flags) return 'file';\n  if (events.ItemIsDir & flags) return 'directory';\n  if (events.ItemIsSymlink & flags) return 'symlink';\n}\nfunction anyIsTrue(obj) {\n  for (let key in obj) {\n    if (obj[key]) return true;\n  }\n  return false;\n}\nfunction getEventType(flags) {\n  if (events.ItemRemoved & flags) return 'deleted';\n  if (events.ItemRenamed & flags) return 'moved';\n  if (events.ItemCreated & flags) return 'created';\n  if (events.ItemModified & flags) return 'modified';\n  if (events.RootChanged & flags) return 'root-changed';\n  if (events.ItemCloned & flags) return 'cloned';\n  if (anyIsTrue(flags)) return 'modified';\n  return 'unknown';\n}\nfunction getFileChanges(flags) {\n  return {\n    inode: !!(events.ItemInodeMetaMod & flags),\n    finder: !!(events.ItemFinderInfoMod & flags),\n    access: !!(events.ItemChangeOwner & flags),\n    xattrs: !!(events.ItemXattrMod & flags)\n  };\n}\n\nexports.watch = watch;\nexports.getInfo = getInfo;\nexports.constants = events;\n"],"sourceRoot":""}